"""                         Atrapa al Hacker
Imagina que eres parte de un equipo de ciberseguridad encargado de proteger una red de servidores
de una empresa internacional. Un hacker ha logrado infiltrarse y est√° intentando enviar un mensaje
secreto desde un servidor inicial (A) hasta su contacto final (H), pasando por diferentes nodos intermedios.
Cada nodo representa un servidor que podr√≠a estar comprometido. Tu misi√≥n es identificar qu√© servidor (nodo)
es el punto clave de la red: aquel que si se desconecta, impedir√≠a que el mensaje llegue a su destino.

Para lograrlo, el juego se desarrollara as√≠:

  1. Se muestra en pantalla una red de servidores (grafo) con conexiones representadas visualmente.

  2. El mensaje del hacker debe ir desde el servidor A hasta el servidor H.

  3. Cada uno eligira un nodo que considera cr√≠tico: el que al eliminarlo cortar√≠a la comunicaci√≥n.

  4. El programa calcula y muestra la centralidad de intermediaci√≥n de todos los nodos, explicando cu√°l era realmente m√°s importante.

  5. Luego se elimina el nodo elegido y se verifica si el hacker a√∫n puede comunicarse o si la red qued√≥ bloqueada.



"""
import networkx as nx
import matplotlib.pyplot as plt
import random

G = nx.Graph()
edges = [
    # Entrada con bifurcaciones
    ('A','B'), ('A','C'), ('A','D'),
    ('B','E'), ('B','F'), ('C','F'), ('C','G'), ('D','G'), ('D','H1'),
    # Camino intermedio alternativo
    ('E','I'), ('F','J'), ('G','J'),
    # Convergencia en K
    ('I','K'), ('J','K'),
    # Nodo trampa
    ('H1','Z'), ('Z','K'),
    # Salidas desde K
    ('K','L'), ('K','M'), ('K','N'),
    # Final hacia H
    ('L','H'), ('M','H'), ('N','H'),
    # Rutas enga√±osas
    ('F','X'), ('X','Y'), ('Y','K'),
    ('G','W'), ('W','K'),
    # Caminos distractores
    ('B','P'), ('P','Q'), ('Q','R'), ('R','S'), ('S','K'),
    ('J','T'), ('T','U'), ('U','V'), ('V','K'),
    ('M','AA'), ('AA','AB'), ('AB','AC'), ('AC','K'),
    ('Z','AD'), ('AD','AE'), ('AE','AF'), ('AF','K'),
]
G.add_edges_from(edges)

# Visualizaci√≥n inicial
pos = nx.spring_layout(G, seed=42)
plt.figure(figsize=(18,14))
nx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=1300, font_size=12, edge_color='gray')
plt.title("Red de servidores (A a H)")
plt.show()

# Calcular y mostrar centralidad de intermediaci√≥n en orden aleatorio
betweenness = nx.betweenness_centrality(G)
items = list(betweenness.items())
random.shuffle(items)

print("\nüîç Centralidad de intermediaci√≥n de los nodos (en orden aleatorio):")
for node, value in items:
    print(f" - Nodo {node}: {value:.4f}")

# Elecci√≥n del jugador
eleccion = input("\nü§î ¬øQu√© nodo crees que es m√°s importante para impedir el mensaje del hacker? Escribe un nodo (A-Z u otros): ").upper()

if eleccion in betweenness:
    print(f"\nüìå Elegiste el nodo {eleccion} con una centralidad de {betweenness[eleccion]:.4f}")
else:
    print("\n‚ùå Ese nodo no existe en la red.")
    exit()

# Simular desconexi√≥n y verificar comunicaci√≥n
G_removed = G.copy()
G_removed.remove_node(eleccion)
print(f"\nüö´ Nodo {eleccion} eliminado de la red...")

if nx.has_path(G_removed, 'A', 'H'):
    print("üì° El hacker A√öN puede comunicarse con su contacto final.")
else:
    print("‚úÖ ¬°El mensaje ha sido bloqueado! No hay ruta disponible de A a H.")

# Visualizaci√≥n tras eliminaci√≥n
plt.figure(figsize=(18,14))
nx.draw(G_removed, pos, with_labels=True, node_color='lightcoral', node_size=1300, font_size=12, edge_color='gray')
plt.title("Red tras eliminaci√≥n del nodo")
plt.show()